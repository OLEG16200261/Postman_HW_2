{
	"info": {
		"_postman_id": "e13f0c93-b91b-4f79-9879-50572fda79a6",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21726195"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2.статус код 200\r",
							"pm.test(\"status cod is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Correct type\", function () {\r",
							"    pm.expect(pm.response.text()).to.eql(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonDate = pm.response.json();\r",
							"let res_name = jsonDate.name;\r",
							"let res_age = jsonDate.age;\r",
							"let res_salary = jsonDate.salary;\r",
							"let res_salary_4 = jsonDate.family.u_salary_1_5_year;\r",
							"let family = jsonDate.family;\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req = request.data;\r",
							"let req_name = req.name;\r",
							"let req_age = req.age;\r",
							"let req_salary = req.salary;\r",
							"let req_salary_4 = req.salary * 4;\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Correct name\", function () {\r",
							"    pm.expect(req_name).to.eql(\"oleg\");\r",
							"});\r",
							"// 8. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Correct name\", function () {\r",
							"    pm.expect(res_name).to.eql(\"oleg\");\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Correct age\", function () {\r",
							"    pm.expect(res_age).to.eql(\"30\");\r",
							"});\r",
							"// 9. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Correct age\", function () {\r",
							"    pm.expect(req_age).to.eql(\"30\");\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Correct salary\", function () {\r",
							"    pm.expect(res_salary).to.eql(150000);\r",
							"});\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Correct salary\", function () {\r",
							"    pm.expect(req_salary).to.eql(\"150000\");\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(\"family --\", family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Correct salary\", function () {\r",
							"    pm.expect(res_salary_4).to.eql(req_salary_4);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonDate = pm.response.json();\r",
							"let res_name = jsonDate.name;\r",
							"let res_age = jsonDate.age;\r",
							"let res_salary = String(jsonDate.salary);\r",
							"let res_family = jsonDate.family;\r",
							"let res_dog = jsonDate.family.pets.dog;\r",
							"let res_dog_name = jsonDate.family.pets.dog.name;\r",
							"let res_dog_age = jsonDate.family.pets.dog.age;\r",
							"\r",
							"// 4. Спарсить request.\r",
							"\r",
							"let req = pm.request.url.query.toObject();\r",
							"let req_name = req.name;\r",
							"let req_age = req.age;\r",
							"let req_salary = req.salary;\r",
							"\r",
							"// // // 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Correct name\", function () {\r",
							"    pm.expect(req_name).to.eql(res_name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Correct age\", function () {\r",
							"    pm.expect(req_age).to.eql(res_age);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Correct salary\", function () {\r",
							"    pm.expect(req_salary).to.eql(res_salary);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(\"res_family --\",res_family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog_name\", function () {\r",
							"    pm.expect(JSON.stringify(res_dog)).to.include(\"name\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog_age\", function () {\r",
							"    pm.expect(JSON.stringify(res_dog)).to.include(\"age\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog_Luky\", function () {\r",
							"    pm.expect(res_dog_name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog_Age\", function () {\r",
							"    pm.expect(res_dog_age).to.eql( 4 );\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonDate = pm.response.json();\r",
							"let res_name = jsonDate.name;\r",
							"let res_age = String(jsonDate.age);\r",
							"let res_salary = jsonDate.salary;\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"let req_name = req.name;\r",
							"let req_age = req.age;\r",
							"let req_salary = req.salary;\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Correct name\", function () {\r",
							"    pm.expect(res_name).to.eql(req_name);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Correct age\", function () {\r",
							"    pm.expect(res_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(\"req_salary --\",req_salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"res_salary --\",res_salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"res_salary--\",res_salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"res_salary--\",res_salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"res_salary--\",res_salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Equality_salary_0\", function () {\r",
							"    pm.expect(String(res_salary[0])).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Equality_salary_1\", function () {\r",
							"    pm.expect(res_salary[1]).to.eql(String(req_salary*2));\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Equality_salary_2\", function () {\r",
							"    pm.expect(res_salary[2]).to.eql(String(req_salary*3));\r",
							"});\r",
							"\r",
							"// // 15 - 20. Создать в окружении переменную , передать в окружение\r",
							"pm.environment.set(\"name\", \"oleg\");\r",
							"pm.environment.set(\"age\", 30);\r",
							"pm.environment.set(\"salary\", 150000);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (let i = 0; i <3; i++){\r",
							"    console.log(jsonDate.salary[i])\r",
							"}\r",
							"\r",
							"// res_salary.forEach(item) => {console.log(item)};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"name\", \"oleg\");\r",
							"pm.environment.set(\"age\", 30);\r",
							"pm.environment.set(\"salary\", 150000);\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"let jsonDate = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req = request.data;\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Variables\", function () {\r",
							"    pm.expect(JSON.stringify(jsonDate)).to.include(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Variables_2\", function () {\r",
							"    pm.expect(JSON.stringify(jsonDate)).to.include(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Variables_3\", function () {\r",
							"    pm.expect(JSON.stringify(jsonDate)).to.include(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Variables_4\", function () {\r",
							"    pm.expect(JSON.stringify(jsonDate)).to.include(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Variables_5\", function () {\r",
							"    pm.expect(JSON.stringify(jsonDate)).to.include(\"qa_salary_after_3.5_year\");\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Variables_6\", function () {\r",
							"    pm.expect(JSON.stringify(jsonDate)).to.include(\"person\");\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Variables_7\", function () {\r",
							"    pm.expect(String(jsonDate.start_qa_salary)).to.eql(req.salary);\r",
							"});\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Variables_8\", function () {\r",
							"    pm.expect(Number(jsonDate.qa_salary_after_6_months)).to.eql(req.salary*2);\r",
							"});\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Variables_9\", function () {\r",
							"    pm.expect(Number(jsonDate.qa_salary_after_12_months)).to.eql(req.salary*2.7);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Variables_10\", function () {\r",
							"    pm.expect(jsonDate['qa_salary_after_1.5_year']).to.eql(req.salary*3.3);\r",
							"});\r",
							"// // 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Variables_11\", function () {\r",
							"    pm.expect(jsonDate['qa_salary_after_3.5_years']).to.eql(req.salary*3.8);\r",
							"});\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Variables_12\", function () {\r",
							"    pm.expect(String(jsonDate.person.u_name[1])).to.eql(req.salary);\r",
							"});\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Variables_13\", function () {\r",
							"    pm.expect(String(jsonDate.person.u_age)).to.eql(req.age);\r",
							"});\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Variables_14\", function () {\r",
							"    pm.expect(jsonDate.person.u_salary_5_years).to.eql(req.salary*4.2);\r",
							"});\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for ( let i=1; 1<3; i++){\r",
							"    if(i==0){\r",
							"        console.log(jsonDate.person.u_age)\r",
							"    }else if(1==i){\r",
							"        console.log(jsonDate.person.u_name)\r",
							"    }else (console.log(jsonDate.person.u_salary_5_years))\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}